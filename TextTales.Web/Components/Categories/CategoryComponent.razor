@using TextTales.Models;
@using TextTales.Web.Interfaces;

@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>@_title</PageTitle>
<RadzenStack AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
    <h2>
        <span class="oi oi-list-rich" aria-hidden="true"></span> @_title
    </h2>
</RadzenStack>

<RadzenTemplateForm TItem="Category" Data="Model" Submit="SubmitHandler">
    <RadzenCard class="my-2">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
            <div class="form-group mb-3 w-50">
                <RadzenLabel Text="Name" />
                <RadzenTextBox Name="Name" @bind-Value="Model.Name" class="form-control" />
                <RadzenRequiredValidator Component="Name" Text="The Name field is required." Style="position: absolute; font-weight: bold;" />
                <RadzenCustomValidator Component="Name" Validator="() => CategoryService.ValidateField(Id, Model.Name, nameof(Model.Name))"
                                       Text="The Name field already exists." Style="position: absolute; font-weight: bold;" />
            </div>
            <div class="form-group mb-3 w-50">
                <RadzenLabel Text="Display Order" />
                <RadzenNumeric Name="DisplayOrder" @bind-Value="Model.DisplayOrder" class="form-control" />
                <RadzenNumericRangeValidator Component="DisplayOrder" Min="1" Max="50" Text="The Display Order field should be between 1 and 50."
                                             Style="display: block; position: absolute; font-weight: bold;" />
                <RadzenCustomValidator Component="DisplayOrder" Validator="() => CategoryService.ValidateField(Id, Model.DisplayOrder, nameof(Model.DisplayOrder))"
                                       Text="The Display Order field already exists."
                                       Style="display: block; position: absolute; font-weight: bold;" />
            </div>
        </RadzenStack>
        <div class="mt-3">
            <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="2rem">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Save & Close" Variant="Variant.Filled" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
                <RadzenButton ButtonType="ButtonType.Button" Text="Cancel" Click="OnCancelClickHandler" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
            </RadzenRow>
        </div>
    </RadzenCard>
    @AlertFragmentContent
</RadzenTemplateForm>


@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public Category Model { get; set; } = new();

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [Parameter]
    public required Func<Task> SubmitHandler { get; set; }

    [Parameter]
    public RenderFragment? AlertFragmentContent { get; set; }

    private string _title = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _title = $"{(IsEdit ? "Edit" : "New")} Category";
    }

    private void OnCancelClickHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Category.BaseUrl);
    }
}
