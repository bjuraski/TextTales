@using TextTales.Models;
@using TextTales.Web.Interfaces;

@attribute [Route(Endpoints.Category.BaseUrl)]

@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Categories</PageTitle>
<RadzenRow>
    <RadzenColumn Size="10">
        <h2>Categories</h2>
    </RadzenColumn>
    <RadzenColumn Size="2" Style="text-align: end">
        <RadzenButton Click="NewCategoryHandler" Text="New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
    </RadzenColumn>
</RadzenRow>

<RadzenDataGrid TItem="Category" Data="@Categories" IsLoading="@_isLoading" AllowFiltering="true" AllowColumnResize="true" 
                AllowAlternatingRows="false" AllowSorting="true" FilterMode="FilterMode.SimpleWithMenu" ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.And" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedCategories>
    <Columns>
        <RadzenDataGridColumn TItem="Category" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Category" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Category" Property="DisplayOrder" Title="Display Order" />
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<Category>? Categories { get; set; }

    private IList<Category> SelectedCategories { get; set; } = new List<Category>();

    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        Categories = await CategoryService.GetCategories();
        _isLoading = false;
    }

    private void NewCategoryHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Category.AddUrl);
    }
}
