@using TextTales.Models;
@using TextTales.Web.Interfaces;

@attribute [Route(Endpoints.Category.BaseUrl)]

@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Categories</PageTitle>
<RadzenRow>
    <RadzenColumn Size="10">
        <h2>Categories</h2>
    </RadzenColumn>
    <RadzenColumn Size="2" Style="text-align: end">
        <RadzenButton Click="NewCategoryHandler" Text="New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
    </RadzenColumn>
</RadzenRow>

<RadzenDataGrid TItem="Category" Data="@Categories" IsLoading="@_isLoading" AllowFiltering="true" AllowColumnResize="true" 
                AllowAlternatingRows="false" AllowSorting="true" FilterMode="FilterMode.SimpleWithMenu" ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.And" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedCategories>
    <Columns>
        <RadzenDataGridColumn TItem="Category" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Category" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Category" Property="DisplayOrder" Title="Display Order" />
        <RadzenDataGridColumn TItem="Category" Context="category" Filterable="false" Sortable="false">
            <Template Context="category">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6">
                        <RadzenButton Click="() => EditCategoryHandler(category.Id)" Text="Edit" Icon="edit" ButtonStyle="ButtonStyle.Dark" Style="width: 100%" />
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenButton Click="() => DeleteCategoryHandler(category.Id)" Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<Category>? Categories { get; set; }

    private IList<Category> SelectedCategories { get; set; } = new List<Category>();

    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        Categories = await CategoryService.GetCategories();
        _isLoading = false;
    }

    private void NewCategoryHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Category.AddUrl);
    }

    private void EditCategoryHandler(long categoryId)
    {
        NavigationManager.NavigateTo(Endpoints.Category.SetEditUrl(categoryId));
    }

    private async Task DeleteCategoryHandler(long categoryId)
    {
        var dialogResult = await DialogService.Confirm(
            "Do you really want to delete the category?",
            "Delete Category",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No", ShowClose = false });

        if (dialogResult.HasValue && dialogResult.Value == false)
        {
            return;
        }

        var isDeleted = await CategoryService.DeleteCategory(categoryId);

        if (isDeleted)
        {
            NavigationManager.NavigateTo(Endpoints.Category.BaseUrl, true);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Category deleted successfully!");
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Category can't be deleted!");
        }
    }
}
