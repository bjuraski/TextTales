@using TextTales.Models;
@using TextTales.Web.Interfaces;

@attribute [Route(Endpoints.Category.EditUrl)]

@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService
@inject NotificationService NotificationService

<PageTitle>Edit Category</PageTitle>
<RadzenStack AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
    <h2>
        <span class="oi oi-list-rich" aria-hidden="true"></span> Edit Category
    </h2>
</RadzenStack>

<RadzenTemplateForm TItem="Category" Data="Model" Submit="SubmitHandler">
    <RadzenCard class="my-2">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
            <div class="form-group mb-3 w-50">
                <RadzenLabel Text="Name" />
                <RadzenTextBox Name="Name" @bind-Value="Model.Name" class="form-control" />
                <RadzenRequiredValidator Component="Name" Text="The Name field is required." Style="position: absolute; font-weight: bold;" />
            </div>
            <div class="form-group mb-3 w-50">
                <RadzenLabel Text="Display Order" />
                <RadzenNumeric Name="DisplayOrder" @bind-Value="Model.DisplayOrder" class="form-control" />
                <RadzenNumericRangeValidator Component="DisplayOrder" Min="1" Max="50" Text="The Display Order field should be between 1 and 50."
                                             Style="display: block; position: absolute; font-weight: bold;" />
            </div>
        </RadzenStack>
        <div class="mt-3">
            <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="2rem">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Save & Close" Variant="Variant.Filled" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
                <RadzenButton ButtonType="ButtonType.Button" Text="Cancel" Click="OnCancelClickHandler" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
            </RadzenRow>
        </div>
    </RadzenCard>
    <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Danger" Visible="@_isVisible" Text="@_alertText" />
</RadzenTemplateForm>

@code {
    [Parameter]
    public long Id { get; set; }

    private Category Model { get; set; } = new();

    private bool _isVisible = false;

    private string _alertText = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var category = await CategoryService.GetCategory(Id);

        if (category is not null)
        {
            Model = category;
        }
        else
        {
            NavigationManager.NavigateTo(Endpoints.Category.BaseUrl);
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Category can't be found!");
        }
    }

    private async Task SubmitHandler()
    {
        var isUpdated = await CategoryService.UpdateCategory(Id, Model!);

        if (!isUpdated)
        {
            await DisplayError("Something went wrong! Failed to update category.");

            return;
        }

        NavigationManager.NavigateTo(Endpoints.Category.BaseUrl);
        NotificationService.Notify(NotificationSeverity.Success, "Success", "Category updated successfully!");
    }

    private void OnCancelClickHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Category.BaseUrl);
    }

    private async Task DisplayError(string message)
    {
        _isVisible = true;
        _alertText = message;

        await InvokeAsync(StateHasChanged);

        await Task.Delay(5000);

        _isVisible = false;

        await InvokeAsync(StateHasChanged);
    }
}
