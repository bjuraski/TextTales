@using System.Globalization;
@using TextTales.Models;
@using TextTales.Web.Interfaces;

@attribute [Route(Endpoints.Product.BaseUrl)]

@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Products</PageTitle>
<RadzenRow>
    <RadzenColumn Size="10">
        <h2>Products</h2>
    </RadzenColumn>
    <RadzenColumn Size="2" Style="text-align: end">
        <RadzenButton Click="NewProductHandler" Text="New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
    </RadzenColumn>
</RadzenRow>

<RadzenDataGrid TItem="Product" Data="@Products" IsLoading="@_isLoading" AllowFiltering="true" AllowColumnResize="true"
                AllowAlternatingRows="false" AllowSorting="true" FilterMode="FilterMode.SimpleWithMenu"
                LogicalFilterOperator="LogicalFilterOperator.And" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedProducts>
    <Columns>
        <RadzenDataGridColumn TItem="Product" Property="Id" Title="Id" Width="145px" />
        <RadzenDataGridColumn TItem="Product" Property="Title" Title="Title" />
        <RadzenDataGridColumn TItem="Product" Property="Author" Title="Author" />
        <RadzenDataGridColumn TItem="Product" Property="InternationalStandardBookNumber" Title="ISBN" />
        <RadzenDataGridColumn TItem="Product" Property="Price" Title="Price">
            <Template Context="detail">
                @String.Format(new CultureInfo("fr-FR"), "{0:C}", detail.Price)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Product" Context="product" Filterable="false" Sortable="false">
            <Template Context="product">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="6">
                        <RadzenButton Click="() => EditProductHandler(product.Id)" Text="Edit" Icon="edit" ButtonStyle="ButtonStyle.Dark" Style="width: 100%" />
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenButton Click="() => DeleteProductHandler(product.Id)" Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="width: 100%" />
                    </RadzenColumn>
                </RadzenRow>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IEnumerable<Product>? Products { get; set; }

    private IList<Product> SelectedProducts { get; set; } = new List<Product>();

    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        Products = await ProductService.GetProducts();
        _isLoading = false;
    }

    private void NewProductHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Product.AddUrl);
    }

    private void EditProductHandler(long productId)
    {
        NavigationManager.NavigateTo(Endpoints.Product.SetEditUrl(productId));
    }

    private async Task DeleteProductHandler(long productId)
    {
        var dialogResult = await DialogService.Confirm(
            "Do you really want to delete the product?",
            "Delete Product",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No", ShowClose = false });

        if (dialogResult.HasValue && dialogResult.Value == false)
        {
            return;
        }

        var isDeleted = await ProductService.DeleteProduct(productId);

        if (isDeleted)
        {
            NavigationManager.NavigateTo(Endpoints.Product.BaseUrl, true);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Product deleted successfully!");
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Product can't be deleted!");
        }
    }
}
