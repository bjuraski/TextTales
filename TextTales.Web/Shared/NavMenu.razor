@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@using TextTales.Web.Areas.Identity.Data;

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<RadzenHeader>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0">
        <RadzenColumn Size="5">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@ToggleNavMenu" />
                <RadzenLabel Text="TextTales" />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="7">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                @if (!_isAuthenticated)
                {
                    <RadzenButton Variant="Variant.Text" Click="LoginRedirectHandler" Text="Login" ButtonStyle="ButtonStyle.Primary" />
                }
                else
                {
                    @if (!string.IsNullOrEmpty(_userName))
                    {
                        <RadzenButton Variant="Variant.Text" Click="ManageAccountRedirectHandler" Text="@_userName" ButtonStyle="ButtonStyle.Primary" />
                    }
                    <RadzenButton Variant="Variant.Text" Click="LogoutRedirectHandler" Text="Logout" ButtonStyle="ButtonStyle.Primary" />
                }
            </RadzenStack>
        </RadzenColumn>

    </RadzenRow>
</RadzenHeader>
<RadzenSidebar @bind-Expanded="@sidebarExpanded">
    <RadzenPanelMenu>
        <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
        @if (_isAdmin)
        {
            <RadzenPanelMenuItem Text="Users" Icon="account_box" />
            <RadzenPanelMenuItem Text="Content Management" Icon="grid_view">
                <RadzenPanelMenuItem Text="Categories" Icon="category" Path="@(Endpoints.Category.BaseUrl)" />
                <RadzenPanelMenuItem Text="Products" Icon="add_shopping_cart" Path="@(Endpoints.Product.BaseUrl)" />
            </RadzenPanelMenuItem>
        }
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private bool sidebarExpanded = true;

    private bool _isAuthenticated;

    private bool _isAdmin;

    private string? _userName;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AuthenticationStateTask is null)
        {
            return;
        }

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user is not null && user.Identity is not null)
        {
            _isAdmin = user.IsInRole(Roles.RoleAdmin);
            // var claimsIdentity = (ClaimsIdentity)user.Identity;

            // if (claimsIdentity is not null)
            // {
            //     var userId = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // }

            _isAuthenticated = user.Identity.IsAuthenticated;
            _userName = UserManager.GetUserName(user);
        }
    }

    private void ToggleNavMenu()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    private void LoginRedirectHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Access.Login, true);
    }

    private void ManageAccountRedirectHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Access.ManageAccount, true);
    }

    private void LogoutRedirectHandler()
    {
        NavigationManager.NavigateTo(Endpoints.Access.Logout
            , true);
    }
}
